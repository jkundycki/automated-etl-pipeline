      - name: MSCK hourly (with reason)
        run: |
          set -euo pipefail
          OUT="s3://automated-etl-pipeline/athena-results/"
          Q="MSCK REPAIR TABLE automated_etl_db.weather_hourly"
          echo "Running: $Q"
          QID=$(aws athena start-query-execution \
                  --work-group primary \
                  --query-string "$Q" \
                  --result-configuration OutputLocation="$OUT" \
                  --query 'QueryExecutionId' --output text)
          for i in {1..30}; do
            STATE=$(aws athena get-query-execution --query-execution-id "$QID" \
                     --query 'QueryExecution.Status.State' --output text)
            echo "State: $STATE"
            if [ "$STATE" = "SUCCEEDED" ]; then break; fi
            if [ "$STATE" = "FAILED" ] || [ "$STATE" = "CANCELLED" ]; then
              REASON=$(aws athena get-query-execution --query-execution-id "$QID" \
                       --query 'QueryExecution.Status.StateChangeReason' --output text)
              echo "MSCK hourly failed: $REASON"
              exit 1
            fi
            sleep 2
          done

      - name: MSCK daily (with reason)
        run: |
          set -euo pipefail
          OUT="s3://automated-etl-pipeline/athena-results/"
          Q="MSCK REPAIR TABLE automated_etl_db.weather_daily"
          echo "Running: $Q"
          QID=$(aws athena start-query-execution \
                  --work-group primary \
                  --query-string "$Q" \
                  --result-configuration OutputLocation="$OUT" \
                  --query 'QueryExecutionId' --output text)
          for i in {1..30}; do
            STATE=$(aws athena get-query-execution --query-execution-id "$QID" \
                     --query 'QueryExecution.Status.State' --output text)
            echo "State: $STATE"
            if [ "$STATE" = "SUCCEEDED" ]; then break; fi
            if [ "$STATE" = "FAILED" ] || [ "$STATE" = "CANCELLED" ]; then
              REASON=$(aws athena get-query-execution --query-execution-id "$QID" \
                       --query 'QueryExecution.Status.StateChangeReason' --output text)
              echo "MSCK daily failed: $REASON"
              exit 1
            fi
            sleep 2
          done

      - name: Sanity check (today + yesterday, with S3 listing)
        run: |
          set -euo pipefail
          TODAY=$(date -u +%Y-%m-%d)
          YDAY=$(date -u -d 'yesterday' +%Y-%m-%d)
          echo "Checking counts for TODAY=$TODAY and YDAY=$YDAY"

          OUT="s3://automated-etl-pipeline/athena-results/"
          for D in "$TODAY" "$YDAY"; do
            SQL="SELECT COUNT(*) AS c FROM automated_etl_db.weather_hourly WHERE date = DATE '$D';"
            echo "SQL: $SQL"
            QID=$(aws athena start-query-execution --work-group primary \
                   --query-string "$SQL" \
                   --result-configuration OutputLocation="$OUT" \
                   --query 'QueryExecutionId' --output text)
            for i in {1..30}; do
              STATE=$(aws athena get-query-execution --query-execution-id "$QID" \
                       --query 'QueryExecution.Status.State' --output text)
              echo "Athena state for $D: $STATE"
              [ "$STATE" = "SUCCEEDED" ] && break
              [ "$STATE" = "FAILED" ] && echo "Count query failed for $D" && exit 1
              sleep 2
            done
            COUNT=$(aws athena get-query-results --query-execution-id "$QID" \
                     --query 'ResultSet.Rows[1].Data[0].VarCharValue' --output text)
            echo "Rows for $D: $COUNT"
          done

          echo "Recent S3 objects under hourly/"
          aws s3 ls s3://automated-etl-pipeline/weather/hourly/ --recursive | tail -n 20

          # Fail only if BOTH today and yesterday are zero (UTC timing guard)
          if [ "${COUNT_TODAY:-0}" = "" ]; then
            COUNT_TODAY=$(aws athena start-query-execution --work-group primary \
              --query-string "SELECT COUNT(*) FROM automated_etl_db.weather_hourly WHERE date = DATE '$TODAY';" \
              --result-configuration OutputLocation="$OUT" --query 'QueryExecutionId' --output text >/dev/null 2>&1 || echo 0)
          fi

